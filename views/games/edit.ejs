<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <div class="card border-0 shadow">
        <div class="card-header bg-primary text-white py-3">
          <h2 class="mb-0"><i class="fas fa-gamepad me-2"></i><%= game._id === 'new' ? (locals.t ? t('Add New Game') : 'Add New Game') : (locals.t ? t('Edit Game') : 'Edit Game') %></h2>
        </div>
        <div class="card-body p-4">
          <form action="<%= game._id === 'new' ? '/games/new' : `/games/${game._id}/update` %>" method="POST" class="needs-validation" novalidate>
            <!-- Game Name -->
            <div class="mb-4">
              <label for="name" class="form-label"><%= locals.t ? t('Game Name') : 'Game Name' %></label>
              <input type="text" class="form-control" id="name" name="name" value="<%= game.name %>" required>
              <div class="invalid-feedback">
                <%= locals.t ? t('Game name is required') : 'Game name is required' %>
              </div>
            </div>

            <!-- Photo URL -->
            <div class="mb-4">
              <label for="photo" class="form-label"><%= locals.t ? t('Photo URL') : 'Photo URL' %></label>
              <div class="input-group">
                <input type="url" class="form-control" id="photo" name="photo" value="<%= game.photo %>" required>
                <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#imageGenerationModal">
                  <i class="fas fa-magic me-2"></i><%= locals.t ? t('Generate Image') : 'Generate Image' %>
                </button>
              </div>
              <div class="form-text"><%= locals.t ? t('Enter a URL for the game\'s cover image or use our AI to generate one') : 'Enter a URL for the game\'s cover image or use our AI to generate one' %></div>
              
              <div class="mt-3">
                <div class="d-flex align-items-center">
                  <div class="photo-preview me-3">
                    <img src="<%= game.photo %>" alt="<%= locals.t ? t('Game Preview') : 'Game Preview' %>" class="rounded" style="width: 150px; height: 100px; object-fit: cover;" id="photo-preview">
                  </div>
                  <div>
                    <button type="button" class="btn btn-sm btn-outline-primary" id="auto-generate-button">
                      <i class="fas fa-wand-magic-sparkles me-2"></i><%= locals.t ? t('Auto-Generate from Game Details') : 'Auto-Generate from Game Details' %>
                    </button>
                    <div class="spinner-border text-primary spinner-border-sm d-none" role="status" id="auto-generate-spinner">
                      <span class="visually-hidden"><%= locals.t ? t('Loading...') : 'Loading...' %></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Genres -->
            <div class="mb-4">
              <label for="genres" class="form-label"><%= locals.t ? t('Genres') : 'Genres' %></label>
              <input type="text" class="form-control" id="genres" name="genres" value="<%= game.genres.join(', ') %>" required>
              <div class="form-text"><%= locals.t ? t('Enter genres separated by commas (1-5 genres)') : 'Enter genres separated by commas (1-5 genres)' %></div>
            </div>

            <!-- Description -->
            <div class="mb-4">
              <label for="description" class="form-label"><%= locals.t ? t('Description') : 'Description' %></label>
              <textarea class="form-control" id="description" name="description" rows="4"><%= game.description %></textarea>
              <div class="form-text"><%= locals.t ? t('Provide a brief description of the game') : 'Provide a brief description of the game' %></div>
            </div>

            <!-- Optional Field 1 -->
            <div class="mb-4">
              <label for="optional1" class="form-label"><%= locals.t ? t('Optional Field 1') : 'Optional Field 1' %></label>
              <input type="text" class="form-control" id="optional1" name="optional1" value="<%= game.optional1 || '' %>">
              <div class="form-text"><%= locals.t ? t('E.g., Release Date') : 'E.g., Release Date' %></div>
            </div>

            <!-- Optional Field 2 -->
            <div class="mb-4">
              <label for="optional2" class="form-label"><%= locals.t ? t('Optional Field 2') : 'Optional Field 2' %></label>
              <input type="text" class="form-control" id="optional2" name="optional2" value="<%= game.optional2 || '' %>">
              <div class="form-text"><%= locals.t ? t('E.g., Developer Name') : 'E.g., Developer Name' %></div>
            </div>

            <!-- For admin only - additional options -->
            <% if (isAdmin) { %>
              <hr class="my-4">
              <h5 class="mb-3"><i class="fas fa-shield-alt me-2"></i>Admin Options</h5>
              
              <div class="row mb-4">
                <div class="col-md-6">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="ratingDisabled" name="ratingDisabled" <%= game.ratingDisabled ? 'checked' : '' %>>
                    <label class="form-check-label" for="ratingDisabled">
                      Disable Ratings
                    </label>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="commentDisabled" name="commentDisabled" <%= game.commentDisabled ? 'checked' : '' %>>
                    <label class="form-check-label" for="commentDisabled">
                      Disable Comments
                    </label>
                  </div>
                </div>
              </div>

              <!-- Developer Dropdown (Admin Only) -->
              <div class="mb-4">
                <label for="developer" class="form-label">Developer</label>
                <select class="form-select" id="developer" name="developer">
                  <option value="">None</option>
                  <% users.forEach(user => { %>
                    <option value="<%= user._id %>" <%= game.developer && game.developer.toString() === user._id.toString() ? 'selected' : '' %>>
                      <%= user.name %><%= user.roles && user.roles.isDeveloper ? ' (Developer)' : '' %>
                    </option>
                  <% }) %>
                </select>
                <div class="form-text">Assign a developer to this game</div>
              </div>
            <% } %>

            <!-- Buttons -->
            <div class="d-flex gap-2 mt-4">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-1"></i> <%= locals.t ? t('Save Changes') : 'Save Changes' %>
              </button>
              <a href="/games/<%= game._id %>" class="btn btn-secondary">
                <i class="bi bi-x-circle me-1"></i> <%= locals.t ? t('Cancel') : 'Cancel' %>
              </a>
              <% if (currentUser && (currentUser.isAdmin || (game.creator && game.creator.toString() === currentUser._id.toString()))) { %>
              <button type="button" class="btn btn-danger ms-auto" data-bs-toggle="modal" data-bs-target="#deleteGameModal">
                <i class="bi bi-trash me-1"></i> <%= locals.t ? t('Delete Game') : 'Delete Game' %>
              </button>
              <% } %>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Image Generation Modal -->
<div class="modal fade" id="imageGenerationModal" tabindex="-1" aria-labelledby="imageGenerationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="imageGenerationModalLabel">Generate Game Banner Image</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="imagePrompt" class="form-label">Describe the image you want to generate</label>
          <textarea class="form-control" id="imagePrompt" rows="3" placeholder="Example: A futuristic space shooter with neon colors and a spaceship in the center"></textarea>
        </div>
        
        <div class="text-center mb-3">
          <button type="button" class="btn btn-primary" id="generate-image-btn">
            <i class="fas fa-magic me-2"></i>Generate Image
          </button>
          <div class="spinner-border text-primary spinner-border-sm d-none ms-2" role="status" id="generate-spinner">
            <span class="visually-hidden">Generating...</span>
          </div>
        </div>
        
        <div id="generatedImageContainer" class="text-center mb-3 d-none">
          <img id="generatedImage" class="img-fluid rounded" style="max-height: 300px;" src="" alt="Generated Image">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="use-generated-image" disabled>Use This Image</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Game Modal -->
<div class="modal fade" id="deleteGameModal" tabindex="-1" aria-labelledby="deleteGameModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteGameModalLabel"><%= locals.t ? t('Confirm Deletion') : 'Confirm Deletion' %></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="<%= locals.t ? t('Close') : 'Close' %>"></button>
      </div>
      <div class="modal-body">
        <p><%= locals.t ? t('Are you sure you want to delete this game?') : 'Are you sure you want to delete this game?' %></p>
        <p class="text-danger"><%= locals.t ? t('This action cannot be undone.') : 'This action cannot be undone.' %></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <%= locals.t ? t('Cancel') : 'Cancel' %>
        </button>
        <form action="/games/<%= game._id %>?_method=DELETE" method="POST" class="d-inline">
          <button type="submit" class="btn btn-danger">
            <i class="bi bi-trash me-1"></i> <%= locals.t ? t('Delete Game') : 'Delete Game' %>
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Form validation
    const forms = document.querySelectorAll('.needs-validation');
    forms.forEach(form => {
      form.addEventListener('submit', event => {
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });

    // Photo preview
    const photoInput = document.getElementById('photo');
    const photoPreview = document.getElementById('photo-preview');
    
    photoInput.addEventListener('input', function() {
      if (this.value) {
        photoPreview.src = this.value;
      }
    });
    
    // Image generation from prompt
    const generateImageBtn = document.getElementById('generate-image-btn');
    const imagePrompt = document.getElementById('imagePrompt');
    const generatedImage = document.getElementById('generatedImage');
    const generatedImageContainer = document.getElementById('generatedImageContainer');
    const useGeneratedImage = document.getElementById('use-generated-image');
    const generateSpinner = document.getElementById('generate-spinner');
    
    generateImageBtn.addEventListener('click', function() {
      if (!imagePrompt.value.trim()) {
        alert('Please enter a description for the image you want to generate');
        return;
      }
      
      // Show spinner
      generateSpinner.classList.remove('d-none');
      generateImageBtn.disabled = true;
      useGeneratedImage.disabled = true;
      
      // Call the API to generate image
      fetch('/assistant/generate-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          prompt: imagePrompt.value.trim(),
          width: 1280,
          height: 720
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Display the generated image
          generatedImage.src = data.imageUrl;
          generatedImageContainer.classList.remove('d-none');
          useGeneratedImage.disabled = false;
        } else {
          alert('Failed to generate image: ' + data.error);
        }
      })
      .catch(error => {
        console.error('Error generating image:', error);
        alert('Error generating image: ' + error.message);
      })
      .finally(() => {
        // Hide spinner
        generateSpinner.classList.add('d-none');
        generateImageBtn.disabled = false;
      });
    });
    
    // Use the generated image
    useGeneratedImage.addEventListener('click', function() {
      photoInput.value = generatedImage.src;
      photoPreview.src = generatedImage.src;
      
      // Close the modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('imageGenerationModal'));
      modal.hide();
    });
    
    // Auto-generate from game details
    const autoGenerateButton = document.getElementById('auto-generate-button');
    const autoGenerateSpinner = document.getElementById('auto-generate-spinner');
    const nameInput = document.getElementById('name');
    const genresInput = document.getElementById('genres');
    const descriptionInput = document.getElementById('description');
    
    autoGenerateButton.addEventListener('click', function() {
      const name = nameInput.value.trim();
      const genres = genresInput.value.trim();
      const description = descriptionInput.value.trim();
      
      if (!name || !description) {
        alert('Please enter at least the game name and description before auto-generating an image');
        return;
      }
      
      // Show spinner
      autoGenerateSpinner.classList.remove('d-none');
      autoGenerateButton.disabled = true;
      
      // Call the API to generate game image
      fetch('/assistant/generate-game-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          name,
          genre: genres,
          description
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Use the generated image
          photoInput.value = data.imageUrl;
          photoPreview.src = data.imageUrl;
        } else {
          alert('Failed to generate image: ' + data.error);
        }
      })
      .catch(error => {
        console.error('Error generating game image:', error);
        alert('Error generating game image: ' + error.message);
      })
      .finally(() => {
        // Hide spinner
        autoGenerateSpinner.classList.add('d-none');
        autoGenerateButton.disabled = false;
      });
    });
  });
</script>