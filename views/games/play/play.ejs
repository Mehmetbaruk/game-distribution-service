<div class="container py-5">
  <!-- Game Play Header -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card border-0 shadow-sm bg-primary text-white">
        <div class="card-body p-4">
          <div class="d-flex justify-content-between align-items-center">
            <h1 class="mb-0 display-5 fw-bold"><%= game.name %></h1>
            <div>
              <a href="/games/<%= game._id %>" class="btn btn-light text-primary me-2">
                <i class="fas fa-info-circle me-1"></i> <%= locals.t ? t("Game Details") : "Game Details" %>
              </a>
              <a href="/games" class="btn btn-outline-light">
                <i class="fas fa-gamepad me-1"></i> <%= locals.t ? t("All Games") : "All Games" %>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Game Play Window -->
  <div class="row">
    <div class="col-md-8 mx-auto">
      <div class="card border-0 shadow-lg">
        <div class="card-header bg-success text-white py-3">
          <h3 class="mb-0 text-center">
            <i class="fas fa-play-circle me-2"></i> <%= locals.t ? t("Game is playing now") : "Game is playing now" %>
          </h3>
        </div>
        
        <div class="card-body text-center py-5">
          <!-- Game Image -->
          <div class="mb-4">
            <img src="<%= game.photo %>" alt="<%= game.name %>" class="img-fluid rounded" style="max-height: 300px;">
          </div>
          
          <!-- Real-Time Counter -->
          <div class="counter-display bg-dark text-white py-4 px-5 rounded-3 mb-4 d-inline-block">
            <h2 class="timer display-5 fw-bold mb-0" id="gameTimer">00:00:00</h2>
            <p class="mb-0 mt-2 text-light"><%= locals.t ? t("Hours") : "Hours" %> : <%= locals.t ? t("Minutes") : "Minutes" %> : <%= locals.t ? t("Seconds") : "Seconds" %></p>
          </div>
          
          <!-- Previous Play Time Info -->
          <% if (userGameStat && ((userGameStat.playTime > 0) || (userGameStat.playTimeSeconds && userGameStat.playTimeSeconds > 0))) { %>
            <div class="mt-3 mb-4">
              <p class="text-muted">
                <i class="fas fa-history me-1"></i> <%= locals.t ? t("You've previously played this game for") : "You've previously played this game for" %> 
                <span class="fw-bold" id="previousPlayTime">
                <% 
                  const seconds = userGameStat.playTimeSeconds || (userGameStat.playTime * 3600);
                  const hours = Math.floor(seconds / 3600);
                  const minutes = Math.floor((seconds % 3600) / 60);
                  const remainingSeconds = seconds % 60;
                  
                  let timeStr = '';
                  if (hours > 0) {
                    timeStr = `${hours}h ${minutes}m ${remainingSeconds}s`;
                  } else if (minutes > 0) {
                    timeStr = `${minutes}m ${remainingSeconds}s`;
                  } else {
                    timeStr = `${remainingSeconds}s`;
                  }
                %>
                <%= timeStr %>
                </span>
              </p>
            </div>
          <% } %>
          
          <!-- Finish Game Button -->
          <form id="finishGameForm" action="/games/<%= game._id %>/play" method="POST">
            <input type="hidden" name="playTime" id="playTimeHours" value="0">
            <input type="hidden" name="playTimeSeconds" id="playTimeSeconds" value="0">
            
            <button type="submit" class="btn btn-danger btn-lg px-5 py-3">
              <i class="fas fa-stop-circle me-2"></i> <%= locals.t ? t("Finish Game Session") : "Finish Game Session" %>
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Game Stats -->
  <div class="row mt-4">
    <div class="col-md-8 mx-auto">
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-light">
          <h4 class="mb-0"><i class="fas fa-chart-bar me-2"></i> <%= locals.t ? t("Game Statistics") : "Game Statistics" %></h4>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6 mb-3">
              <div class="p-3 bg-light rounded">
                <p class="text-muted mb-1"><%= locals.t ? t("Total Play Time") : "Total Play Time" %></p>
                <h5 class="mb-0 fw-bold" id="gameTotalPlayTime"><%= game.getFormattedPlayTime ? game.getFormattedPlayTime() : `${game.totalPlayTime} hours` %></h5>
              </div>
            </div>
            <div class="col-md-6 mb-3">
              <div class="p-3 bg-light rounded">
                <p class="text-muted mb-1"><%= locals.t ? t("Rating") : "Rating" %></p>
                <h5 class="mb-0 fw-bold">
                  <% if (game.rating > 0) { %>
                    <%= game.rating.toFixed(1) %> / 5
                    <% for (let i = 1; i <= 5; i++) { %>
                      <% if (i <= Math.round(game.rating)) { %>
                        <i class="fas fa-star text-warning"></i>
                      <% } else { %>
                        <i class="far fa-star text-warning"></i>
                      <% } %>
                    <% } %>
                  <% } else { %>
                    <%= locals.t ? t("No ratings yet") : "No ratings yet" %>
                  <% } %>
                </h5>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Variables to track time
    let startTime = Date.now();
    let elapsedTimeInSeconds = 0;
    let timerInterval;
    
    // Get previous play time in seconds (for real-time display)
    const previousSeconds = <%= (userGameStat && userGameStat.playTimeSeconds) ? userGameStat.playTimeSeconds : ((userGameStat && userGameStat.playTime) ? userGameStat.playTime * 3600 : 0) %>;
    
    // Start the timer immediately
    startTimer();
    
    // Function to start the timer
    function startTimer() {
      timerInterval = setInterval(updateTimer, 1000);
    }
    
    // Format time function (reusable)
    function formatTime(totalSeconds) {
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      
      let timeStr = '';
      if (hours > 0) {
        timeStr = `${hours}h ${minutes}m ${seconds}s`;
      } else if (minutes > 0) {
        timeStr = `${minutes}m ${seconds}s`;
      } else {
        timeStr = `${seconds}s`;
      }
      return timeStr;
    }
    
    // Function to update the timer display
    function updateTimer() {
      elapsedTimeInSeconds = Math.floor((Date.now() - startTime) / 1000);
      
      // Calculate hours, minutes, seconds
      const hours = Math.floor(elapsedTimeInSeconds / 3600);
      const minutes = Math.floor((elapsedTimeInSeconds % 3600) / 60);
      const seconds = elapsedTimeInSeconds % 60;
      
      // Format display with leading zeros
      const formattedTime = 
        String(hours).padStart(2, '0') + ':' +
        String(minutes).padStart(2, '0') + ':' +
        String(seconds).padStart(2, '0');
      
      // Update the display
      document.getElementById('gameTimer').textContent = formattedTime;
      
      // Update the hidden fields for form submission
      document.getElementById('playTimeHours').value = hours + (minutes / 60) + (seconds / 3600);
      document.getElementById('playTimeSeconds').value = elapsedTimeInSeconds;
      
      // Update the previous play time display (real-time)
      const previousPlayTimeElement = document.getElementById('previousPlayTime');
      if (previousPlayTimeElement) {
        // Display combined time (previous + current)
        const totalSeconds = previousSeconds + elapsedTimeInSeconds;
        previousPlayTimeElement.textContent = formatTime(totalSeconds);
      }
      
      // Update the total game play time display
      const gameTotalPlayTime = document.getElementById('gameTotalPlayTime');
      if (gameTotalPlayTime) {
        // Estimate new total play time for the game
        const currentGameTotal = <%= game.totalPlayTimeSeconds || (game.totalPlayTime * 3600) || 0 %>;
        const newTotal = currentGameTotal + elapsedTimeInSeconds;
        gameTotalPlayTime.textContent = formatTime(newTotal);
      }
    }
    
    // When the form is submitted
    document.getElementById('finishGameForm').addEventListener('submit', function() {
      // Stop the timer
      clearInterval(timerInterval);
      
      // Final update of form values
      const hours = Math.floor(elapsedTimeInSeconds / 3600);
      const minutes = Math.floor((elapsedTimeInSeconds % 3600) / 60);
      const seconds = elapsedTimeInSeconds % 60;
      
      document.getElementById('playTimeHours').value = hours + (minutes / 60) + (seconds / 3600);
      document.getElementById('playTimeSeconds').value = elapsedTimeInSeconds;
      
      // Send an analytics event
      try {
        console.log(`Game session ended: ${elapsedTimeInSeconds} seconds played`);
        // Could add analytics tracking here if needed
      } catch (e) {
        console.error("Error logging game session", e);
      }
      
      // The form will submit automatically
    });
  });
</script>